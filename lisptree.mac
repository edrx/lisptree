/*
 * This file:
 *   http://anggtwu.net/luatree/lisptree.mac.html
 *   http://anggtwu.net/luatree/lisptree.mac
 *          (find-angg "luatree/lisptree.mac")
 * Author: Eduardo Ochs <eduardoochs@gmail.com>
 *
 * Long story short:
 *
 *   lisptree(f(2,g(3,4));
 *
 * prints:
 *
 *   f__.   
 *   |  |   
 *   2  g__.
 *      |  |
 *      3  4
 *
 * The conversion is done in several steps. First the Maxima function
 * `lisptree0', defined in this file, converts a Maxima object to a
 * Maxima tree. For example, this
 *
 *   lisptree0(f(2,g(3,4));
 *
 * returns something like this:
 *
 *   [f, 2, [g, 3, 4]]
 *
 * then we call `lisptree1', like:
 *
 *   lisptree1([f, 2, [g, 3, 4]]) 
 *
 * and it returns a 2D string. Note that `lisptree1' is defined in
 * Lisp in lisptree-middle.lisp, and it calls several Lisp functions
 * defined in lisptree.lisp.
 *
 * In a diagram:
 *                                                             f__.
 *                                                             |  |
 *   f(a,g(b,c))  ==>  [f,a,[g,b,c]]  ==>  (f a (g b c))  ==>  a  g__.
 *                                                                |  |
 *            lisptree0        simplifytree     lisptree::        b  c
 *                        |                       maxima       ^
 *                        |                                    |
 *                        \------------------------------------/
 *                                  lisptree1
 *
 * (defun e () (interactive) (find-angg "luatree/lisptree.mac"))
 * (find-angg "MAXIMA/luatree3.mac")
 *
 * Â«.load-lispÂ»			(to "load-lisp")
 * Â«.handle-symbolsÂ»		(to "handle-symbols")
 * Â«.handle-symbols-testsÂ»	(to "handle-symbols-tests")
 * Â«.lisptree0Â»			(to "lisptree0")
 * Â«.lisptree0-testsÂ»		(to "lisptree0-tests")
 * Â«.configÂ»			(to "config")
 * Â«.config-testsÂ»		(to "config-tests")
 * Â«.lisptreeÂ»			(to "lisptree")
 * Â«.lisptree-testsÂ»		(to "lisptree-tests")
*/


/* Â«load-lispÂ»  (to ".load-lisp")
 * (find-anchor "~/luatree/lisptree.lisp")
 * (find-anchor "~/luatree/lisptree-middle.lisp")
*/
lisptreedir : pathname_directory(load_pathname);
load(concat(lisptreedir, "lisptree.lisp"));
load(concat(lisptreedir, "lisptree-middle.lisp"));


/* Â«handle-symbolsÂ»  (to ".handle-symbols")
 * See: (find-es "maxima" "low-level-nouns")
*/
stringp     (o) := ?stringp(o);       /* redefine the autoload to stringproc */
format ([args]) := apply(?format, append([false], args));
format0     (o) := format("~s",o);    /* low-level representation */
verbp       (o) := symbolp(o) and (o = verbify(o));
nounp       (o) := symbolp(o) and (o = nounify(o));
specialnounp(o) := nounp(o) and (string(o)#concat("",o));

lisptree0_symbol0(o) := format0(o);  /* Low-level names: %FOO, $FOO and FOO  */
lisptree0_symbol4(o) :=
  if specialnounp(o) then concat("",o)    /* %DERIVATIVE -> derivative       */
  elseif nounp(o)    then concat("'",o)   /* %F          -> 'f               */
  else                    string(o);      /* $FOO        -> foo, FOO -> ?foo */
lisptree0_symbol3(o) :=
  if nounp(o) then concat("'",string(o))  /* %DERIVATIVE -> 'diff            */
  else                        string(o);  /* $FOO        -> foo, FOO -> ?foo */

/* Â«handle-symbols-testsÂ»  (to ".handle-symbols-tests")
 (eepitch-maxima)
 (eepitch-kill)
 (eepitch-maxima)
load("lisptree.mac");
__diff : op('( diff(x^2,x)));
_qdiff : op('('diff(x^2,x)));
__f    : op('( f(x)));
_qf    : op('('f(x)));
mysymbols : [__diff, _qdiff, __f, _qf, foo, ?foo];
line0 : makelist(lisptree0_symbol0(o), o, mysymbols);
line4 : makelist(lisptree0_symbol4(o), o, mysymbols);
line3 : makelist(lisptree0_symbol3(o), o, mysymbols);
matrix(line0, line4, line3);

*/


/* Â«lisptree0Â»  (to ".lisptree0")
*/
lisptree0_number (o) := string(o);
lisptree0_string (o) := concat("", o);         /* for foo without quotes */
lisptree0_string (o) := format("~s", o);       /* for "foo" with quotes */
lisptree0_symbol (o) := lisptree0_symbol0(o);  /* for %DERIVATIVE */
lisptree0_symbol (o) := lisptree0_symbol3(o);  /* for 'diff       */
lisptree0_symbol (o) := lisptree0_symbol4(o);  /* for derivative  */
lisptree0_apatom (o) := append([       lisptree0(op(o))], map(lisptree0, args(o)));
lisptree0_apother(o) := append(["ap",  lisptree0(op(o))], map(lisptree0, args(o)));
lisptree0_subvarp(o) := append(["[_]", lisptree0(op(o))], map(lisptree0, args(o)));

lisptree0(o) :=
  if     stringp(o)  then lisptree0_string (o)
  elseif symbolp(o)  then lisptree0_symbol (o)
  elseif numberp(o)  then lisptree0_number (o)
  elseif subvarp(o)  then lisptree0_subvarp(o)
  elseif atom(op(o)) then lisptree0_apatom (o)
  else                    lisptree0_apother(o);

/* Â«lisptree0-testsÂ»  (to ".lisptree0-tests")
 (eepitch-maxima)
 (eepitch-kill)
 (eepitch-maxima)
load("lisptree.mac");
            lisptree0(f(a,b));
lisptree1__(lisptree0(f(a,b)));

*/

/* Â«configÂ»  (to ".config")
*/
lisptree_config ([opts]) := makelist(lisptree_config1(opt), opt, opts);
lisptree_config1(opt)    :=
  if     opt = 'nq then lisptree0_string (o) := concat("", o)   /* no quotes */
  elseif opt = 'q  then lisptree0_string (o) := format("~s", o) /* use quotes */
  elseif opt = 's0 then lisptree0_symbol (o) := lisptree0_symbol0(o)
  elseif opt = 's3 then lisptree0_symbol (o) := lisptree0_symbol3(o)
  elseif opt = 's4 then lisptree0_symbol (o) := lisptree0_symbol4(o)
  else error();

/* Â«config-testsÂ»  (to ".config-tests")
 (eepitch-maxima)
 (eepitch-kill)
 (eepitch-maxima)
load("lisptree.mac");
lisptree_config(nq,s0)$   lisptree0(f("foo", ?f));
lisptree_config(q, s4)$   lisptree0(f("foo", ?f));

*/


/* Â«lisptreeÂ»  (to ".lisptree")
*/
lisptree (o)  := lisptree1(lisptree0(o));
lisptreeq(o) ::= block([simp:false], lisptree1(lisptree0(o)));

/* Â«lisptree-testsÂ»  (to ".lisptree-tests")
 (eepitch-maxima)
 (eepitch-kill)
 (eepitch-maxima)
load("lisptree.mac");
lisptree (a+2+3);
lisptreeq(a+2+3);
lisptreeq(a[b][c][d]);
lisptreeq(a(b)(c)(d));
lisptree_config(q, s0)$  lisptreeq('diff(x^2,x));  "%DERIVATIVE"$
lisptree_config(nq,s4)$  lisptreeq('diff(x^2,x));  "derivative"$
lisptree_config(nq,s3)$  lisptreeq('diff(x^2,x));  "'diff"$
lisptree_config(q, s3)$  lisptreeq('diff(x^2,x));  "'diff"$

*/
